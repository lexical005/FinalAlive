// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Proto.proto</summary>
public static partial class ProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for Proto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtQcm90by5wcm90byJ7Cg1TdEFjY291bnREYXRhEg8KB2lzRmlyc3QYASAB",
          "KAgSEgoKc2VydmVyVGltZRgCIAEoBRISCgpzZXJ2ZXJab25lGAMgASgFEgwK",
          "BG5hbWUYBCABKAkSEAoIYmFzZUtleXMYBSADKAUSEQoJYmFzZURhdGFzGAYg",
          "AygFIjkKEU1zZ1NlcnZlclJlZ2lzdGVyEhIKCnNlcnZlclR5cGUYASABKAkS",
          "EAoIc2VydmVySUQYAiABKAUiFAoSTXNnU2VydmVyS2VlcEFsaXZlIrIBCh9N",
          "c2dQcmVwYXJlTG9naW5QbGF0Zm9ybVVuaXF1ZUlEEhIKCnN1YkNoYW5uZWwY",
          "ASABKAkSGQoRVVVJRFBsYXRmb3JtQm91bmQYAiABKAkSGQoRVVVJRFBsYXRm",
          "b3JtTG9naW4YAyABKAkSEgoKcmFuZG9tU2FsdBgEIAEoCRIRCgl0aW1lc3Rh",
          "bXAYBSABKAUSDgoGc3RhdHVzGAYgASgFEg4KBnJlc3VsdBgHIAEoBSJmChhN",
          "c2dMb2dpblBsYXRmb3JtVW5pcXVlSUQSEwoLdG9rZW5DdXN0b20YASABKAkS",
          "EgoKZGV2aWNlR1VJRBgCIAEoCRIRCglVVUlETG9naW4YAyABKAQSDgoGcmVz",
          "dWx0GAQgASgFImgKGE1zZ0xvZ2luUGxhdGZvcm1TaWRUb2tlbhIVCg10b2tl",
          "blBsYXRmb3JtGAEgASgJEhIKCmRldmljZUdVSUQYAiABKAkSEQoJVVVJRExv",
          "Z2luGAMgASgEEg4KBnJlc3VsdBgEIAEoBSJDCgpNc2dSZUxvZ2luEhEKCWNo",
          "ZWNrRGF0YRgBIAEoCRISCgpkZXZpY2VHVUlEGAIgASgJEg4KBnJlc3VsdBgD",
          "IAEoBSIZCgdNc2dLaWNrEg4KBnJlc3VsdBgBIAEoBSJIChFNc2dFbnRlckdh",
          "bWVXb3JsZBIQCghzZXJ2ZXJJRBgBIAEoBRIRCglVVUlETG9naW4YAiABKAQS",
          "DgoGcmVzdWx0GAMgASgFIhQKEk1zZ0FnZW50RGlzQ29ubmVjdCIeCgxNc2dL",
          "ZWVwQWxpdmUSDgoGbnVtYmVyGAEgASgFKt0BCgtNZXNzYWdlVHlwZRISCg5T",
          "ZXJ2ZXJSZWdpc3RlchAAEhMKD1NlcnZlcktlZXBBbGl2ZRABEiAKHFByZXBh",
          "cmVMb2dpblBsYXRmb3JtVW5pcXVlSUQQAhIZChVMb2dpblBsYXRmb3JtVW5p",
          "cXVlSUQQAxIZChVMb2dpblBsYXRmb3JtU2lkVG9rZW4QBBILCgdSZUxvZ2lu",
          "EAUSCAoES2ljaxAGEhIKDkVudGVyR2FtZVdvcmxkEAcSEwoPQWdlbnREaXND",
          "b25uZWN0EAgSDQoJS2VlcEFsaXZlEAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MessageType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::StAccountData), global::StAccountData.Parser, new[]{ "IsFirst", "ServerTime", "ServerZone", "Name", "BaseKeys", "BaseDatas" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgServerRegister), global::MsgServerRegister.Parser, new[]{ "ServerType", "ServerID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgServerKeepAlive), global::MsgServerKeepAlive.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPrepareLoginPlatformUniqueID), global::MsgPrepareLoginPlatformUniqueID.Parser, new[]{ "SubChannel", "UUIDPlatformBound", "UUIDPlatformLogin", "RandomSalt", "Timestamp", "Status", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgLoginPlatformUniqueID), global::MsgLoginPlatformUniqueID.Parser, new[]{ "TokenCustom", "DeviceGUID", "UUIDLogin", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgLoginPlatformSidToken), global::MsgLoginPlatformSidToken.Parser, new[]{ "TokenPlatform", "DeviceGUID", "UUIDLogin", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgReLogin), global::MsgReLogin.Parser, new[]{ "CheckData", "DeviceGUID", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgKick), global::MsgKick.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgEnterGameWorld), global::MsgEnterGameWorld.Parser, new[]{ "ServerID", "UUIDLogin", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgAgentDisConnect), global::MsgAgentDisConnect.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgKeepAlive), global::MsgKeepAlive.Parser, new[]{ "Number" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum MessageType {
  [pbr::OriginalName("ServerRegister")] ServerRegister = 0,
  [pbr::OriginalName("ServerKeepAlive")] ServerKeepAlive = 1,
  [pbr::OriginalName("PrepareLoginPlatformUniqueID")] PrepareLoginPlatformUniqueId = 2,
  [pbr::OriginalName("LoginPlatformUniqueID")] LoginPlatformUniqueId = 3,
  [pbr::OriginalName("LoginPlatformSidToken")] LoginPlatformSidToken = 4,
  [pbr::OriginalName("ReLogin")] ReLogin = 5,
  [pbr::OriginalName("Kick")] Kick = 6,
  [pbr::OriginalName("EnterGameWorld")] EnterGameWorld = 7,
  [pbr::OriginalName("AgentDisConnect")] AgentDisConnect = 8,
  [pbr::OriginalName("KeepAlive")] KeepAlive = 9,
}

#endregion

#region Messages
/// <summary>
///  Generated by the msggen.py message compiler.
/// </summary>
public sealed partial class StAccountData : pb::IMessage<StAccountData> {
  private static readonly pb::MessageParser<StAccountData> _parser = new pb::MessageParser<StAccountData>(() => new StAccountData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StAccountData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StAccountData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StAccountData(StAccountData other) : this() {
    isFirst_ = other.isFirst_;
    serverTime_ = other.serverTime_;
    serverZone_ = other.serverZone_;
    name_ = other.name_;
    baseKeys_ = other.baseKeys_.Clone();
    baseDatas_ = other.baseDatas_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StAccountData Clone() {
    return new StAccountData(this);
  }

  /// <summary>Field number for the "isFirst" field.</summary>
  public const int IsFirstFieldNumber = 1;
  private bool isFirst_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsFirst {
    get { return isFirst_; }
    set {
      isFirst_ = value;
    }
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 2;
  private int serverTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerTime {
    get { return serverTime_; }
    set {
      serverTime_ = value;
    }
  }

  /// <summary>Field number for the "serverZone" field.</summary>
  public const int ServerZoneFieldNumber = 3;
  private int serverZone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerZone {
    get { return serverZone_; }
    set {
      serverZone_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "baseKeys" field.</summary>
  public const int BaseKeysFieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_baseKeys_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> baseKeys_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BaseKeys {
    get { return baseKeys_; }
  }

  /// <summary>Field number for the "baseDatas" field.</summary>
  public const int BaseDatasFieldNumber = 6;
  private static readonly pb::FieldCodec<int> _repeated_baseDatas_codec
      = pb::FieldCodec.ForInt32(50);
  private readonly pbc::RepeatedField<int> baseDatas_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BaseDatas {
    get { return baseDatas_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StAccountData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StAccountData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsFirst != other.IsFirst) return false;
    if (ServerTime != other.ServerTime) return false;
    if (ServerZone != other.ServerZone) return false;
    if (Name != other.Name) return false;
    if(!baseKeys_.Equals(other.baseKeys_)) return false;
    if(!baseDatas_.Equals(other.baseDatas_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsFirst != false) hash ^= IsFirst.GetHashCode();
    if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
    if (ServerZone != 0) hash ^= ServerZone.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= baseKeys_.GetHashCode();
    hash ^= baseDatas_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsFirst != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsFirst);
    }
    if (ServerTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ServerTime);
    }
    if (ServerZone != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ServerZone);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    baseKeys_.WriteTo(output, _repeated_baseKeys_codec);
    baseDatas_.WriteTo(output, _repeated_baseDatas_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsFirst != false) {
      size += 1 + 1;
    }
    if (ServerTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
    }
    if (ServerZone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerZone);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += baseKeys_.CalculateSize(_repeated_baseKeys_codec);
    size += baseDatas_.CalculateSize(_repeated_baseDatas_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StAccountData other) {
    if (other == null) {
      return;
    }
    if (other.IsFirst != false) {
      IsFirst = other.IsFirst;
    }
    if (other.ServerTime != 0) {
      ServerTime = other.ServerTime;
    }
    if (other.ServerZone != 0) {
      ServerZone = other.ServerZone;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    baseKeys_.Add(other.baseKeys_);
    baseDatas_.Add(other.baseDatas_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsFirst = input.ReadBool();
          break;
        }
        case 16: {
          ServerTime = input.ReadInt32();
          break;
        }
        case 24: {
          ServerZone = input.ReadInt32();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42:
        case 40: {
          baseKeys_.AddEntriesFrom(input, _repeated_baseKeys_codec);
          break;
        }
        case 50:
        case 48: {
          baseDatas_.AddEntriesFrom(input, _repeated_baseDatas_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class MsgServerRegister : pb::IMessage<MsgServerRegister> {
  private static readonly pb::MessageParser<MsgServerRegister> _parser = new pb::MessageParser<MsgServerRegister>(() => new MsgServerRegister());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgServerRegister> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerRegister() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerRegister(MsgServerRegister other) : this() {
    serverType_ = other.serverType_;
    serverID_ = other.serverID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerRegister Clone() {
    return new MsgServerRegister(this);
  }

  /// <summary>Field number for the "serverType" field.</summary>
  public const int ServerTypeFieldNumber = 1;
  private string serverType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerType {
    get { return serverType_; }
    set {
      serverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "serverID" field.</summary>
  public const int ServerIDFieldNumber = 2;
  private int serverID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerID {
    get { return serverID_; }
    set {
      serverID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgServerRegister);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgServerRegister other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerType != other.ServerType) return false;
    if (ServerID != other.ServerID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ServerType.Length != 0) hash ^= ServerType.GetHashCode();
    if (ServerID != 0) hash ^= ServerID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ServerType.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ServerType);
    }
    if (ServerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ServerID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ServerType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerType);
    }
    if (ServerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgServerRegister other) {
    if (other == null) {
      return;
    }
    if (other.ServerType.Length != 0) {
      ServerType = other.ServerType;
    }
    if (other.ServerID != 0) {
      ServerID = other.ServerID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ServerType = input.ReadString();
          break;
        }
        case 16: {
          ServerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgServerKeepAlive : pb::IMessage<MsgServerKeepAlive> {
  private static readonly pb::MessageParser<MsgServerKeepAlive> _parser = new pb::MessageParser<MsgServerKeepAlive>(() => new MsgServerKeepAlive());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgServerKeepAlive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerKeepAlive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerKeepAlive(MsgServerKeepAlive other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerKeepAlive Clone() {
    return new MsgServerKeepAlive(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgServerKeepAlive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgServerKeepAlive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgServerKeepAlive other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class MsgPrepareLoginPlatformUniqueID : pb::IMessage<MsgPrepareLoginPlatformUniqueID> {
  private static readonly pb::MessageParser<MsgPrepareLoginPlatformUniqueID> _parser = new pb::MessageParser<MsgPrepareLoginPlatformUniqueID>(() => new MsgPrepareLoginPlatformUniqueID());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPrepareLoginPlatformUniqueID> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPrepareLoginPlatformUniqueID() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPrepareLoginPlatformUniqueID(MsgPrepareLoginPlatformUniqueID other) : this() {
    subChannel_ = other.subChannel_;
    uUIDPlatformBound_ = other.uUIDPlatformBound_;
    uUIDPlatformLogin_ = other.uUIDPlatformLogin_;
    randomSalt_ = other.randomSalt_;
    timestamp_ = other.timestamp_;
    status_ = other.status_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPrepareLoginPlatformUniqueID Clone() {
    return new MsgPrepareLoginPlatformUniqueID(this);
  }

  /// <summary>Field number for the "subChannel" field.</summary>
  public const int SubChannelFieldNumber = 1;
  private string subChannel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SubChannel {
    get { return subChannel_; }
    set {
      subChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UUIDPlatformBound" field.</summary>
  public const int UUIDPlatformBoundFieldNumber = 2;
  private string uUIDPlatformBound_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UUIDPlatformBound {
    get { return uUIDPlatformBound_; }
    set {
      uUIDPlatformBound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UUIDPlatformLogin" field.</summary>
  public const int UUIDPlatformLoginFieldNumber = 3;
  private string uUIDPlatformLogin_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UUIDPlatformLogin {
    get { return uUIDPlatformLogin_; }
    set {
      uUIDPlatformLogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "randomSalt" field.</summary>
  public const int RandomSaltFieldNumber = 4;
  private string randomSalt_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RandomSalt {
    get { return randomSalt_; }
    set {
      randomSalt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 5;
  private int timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 6;
  private int status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 7;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPrepareLoginPlatformUniqueID);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPrepareLoginPlatformUniqueID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SubChannel != other.SubChannel) return false;
    if (UUIDPlatformBound != other.UUIDPlatformBound) return false;
    if (UUIDPlatformLogin != other.UUIDPlatformLogin) return false;
    if (RandomSalt != other.RandomSalt) return false;
    if (Timestamp != other.Timestamp) return false;
    if (Status != other.Status) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SubChannel.Length != 0) hash ^= SubChannel.GetHashCode();
    if (UUIDPlatformBound.Length != 0) hash ^= UUIDPlatformBound.GetHashCode();
    if (UUIDPlatformLogin.Length != 0) hash ^= UUIDPlatformLogin.GetHashCode();
    if (RandomSalt.Length != 0) hash ^= RandomSalt.GetHashCode();
    if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SubChannel.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SubChannel);
    }
    if (UUIDPlatformBound.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UUIDPlatformBound);
    }
    if (UUIDPlatformLogin.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(UUIDPlatformLogin);
    }
    if (RandomSalt.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RandomSalt);
    }
    if (Timestamp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Timestamp);
    }
    if (Status != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Status);
    }
    if (Result != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SubChannel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SubChannel);
    }
    if (UUIDPlatformBound.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UUIDPlatformBound);
    }
    if (UUIDPlatformLogin.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UUIDPlatformLogin);
    }
    if (RandomSalt.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RandomSalt);
    }
    if (Timestamp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPrepareLoginPlatformUniqueID other) {
    if (other == null) {
      return;
    }
    if (other.SubChannel.Length != 0) {
      SubChannel = other.SubChannel;
    }
    if (other.UUIDPlatformBound.Length != 0) {
      UUIDPlatformBound = other.UUIDPlatformBound;
    }
    if (other.UUIDPlatformLogin.Length != 0) {
      UUIDPlatformLogin = other.UUIDPlatformLogin;
    }
    if (other.RandomSalt.Length != 0) {
      RandomSalt = other.RandomSalt;
    }
    if (other.Timestamp != 0) {
      Timestamp = other.Timestamp;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          SubChannel = input.ReadString();
          break;
        }
        case 18: {
          UUIDPlatformBound = input.ReadString();
          break;
        }
        case 26: {
          UUIDPlatformLogin = input.ReadString();
          break;
        }
        case 34: {
          RandomSalt = input.ReadString();
          break;
        }
        case 40: {
          Timestamp = input.ReadInt32();
          break;
        }
        case 48: {
          Status = input.ReadInt32();
          break;
        }
        case 56: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgLoginPlatformUniqueID : pb::IMessage<MsgLoginPlatformUniqueID> {
  private static readonly pb::MessageParser<MsgLoginPlatformUniqueID> _parser = new pb::MessageParser<MsgLoginPlatformUniqueID>(() => new MsgLoginPlatformUniqueID());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgLoginPlatformUniqueID> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgLoginPlatformUniqueID() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgLoginPlatformUniqueID(MsgLoginPlatformUniqueID other) : this() {
    tokenCustom_ = other.tokenCustom_;
    deviceGUID_ = other.deviceGUID_;
    uUIDLogin_ = other.uUIDLogin_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgLoginPlatformUniqueID Clone() {
    return new MsgLoginPlatformUniqueID(this);
  }

  /// <summary>Field number for the "tokenCustom" field.</summary>
  public const int TokenCustomFieldNumber = 1;
  private string tokenCustom_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TokenCustom {
    get { return tokenCustom_; }
    set {
      tokenCustom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceGUID" field.</summary>
  public const int DeviceGUIDFieldNumber = 2;
  private string deviceGUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceGUID {
    get { return deviceGUID_; }
    set {
      deviceGUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UUIDLogin" field.</summary>
  public const int UUIDLoginFieldNumber = 3;
  private ulong uUIDLogin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UUIDLogin {
    get { return uUIDLogin_; }
    set {
      uUIDLogin_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 4;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgLoginPlatformUniqueID);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgLoginPlatformUniqueID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TokenCustom != other.TokenCustom) return false;
    if (DeviceGUID != other.DeviceGUID) return false;
    if (UUIDLogin != other.UUIDLogin) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TokenCustom.Length != 0) hash ^= TokenCustom.GetHashCode();
    if (DeviceGUID.Length != 0) hash ^= DeviceGUID.GetHashCode();
    if (UUIDLogin != 0UL) hash ^= UUIDLogin.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TokenCustom.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TokenCustom);
    }
    if (DeviceGUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceGUID);
    }
    if (UUIDLogin != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(UUIDLogin);
    }
    if (Result != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TokenCustom.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenCustom);
    }
    if (DeviceGUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceGUID);
    }
    if (UUIDLogin != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UUIDLogin);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgLoginPlatformUniqueID other) {
    if (other == null) {
      return;
    }
    if (other.TokenCustom.Length != 0) {
      TokenCustom = other.TokenCustom;
    }
    if (other.DeviceGUID.Length != 0) {
      DeviceGUID = other.DeviceGUID;
    }
    if (other.UUIDLogin != 0UL) {
      UUIDLogin = other.UUIDLogin;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          TokenCustom = input.ReadString();
          break;
        }
        case 18: {
          DeviceGUID = input.ReadString();
          break;
        }
        case 24: {
          UUIDLogin = input.ReadUInt64();
          break;
        }
        case 32: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgLoginPlatformSidToken : pb::IMessage<MsgLoginPlatformSidToken> {
  private static readonly pb::MessageParser<MsgLoginPlatformSidToken> _parser = new pb::MessageParser<MsgLoginPlatformSidToken>(() => new MsgLoginPlatformSidToken());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgLoginPlatformSidToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgLoginPlatformSidToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgLoginPlatformSidToken(MsgLoginPlatformSidToken other) : this() {
    tokenPlatform_ = other.tokenPlatform_;
    deviceGUID_ = other.deviceGUID_;
    uUIDLogin_ = other.uUIDLogin_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgLoginPlatformSidToken Clone() {
    return new MsgLoginPlatformSidToken(this);
  }

  /// <summary>Field number for the "tokenPlatform" field.</summary>
  public const int TokenPlatformFieldNumber = 1;
  private string tokenPlatform_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TokenPlatform {
    get { return tokenPlatform_; }
    set {
      tokenPlatform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceGUID" field.</summary>
  public const int DeviceGUIDFieldNumber = 2;
  private string deviceGUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceGUID {
    get { return deviceGUID_; }
    set {
      deviceGUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UUIDLogin" field.</summary>
  public const int UUIDLoginFieldNumber = 3;
  private ulong uUIDLogin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UUIDLogin {
    get { return uUIDLogin_; }
    set {
      uUIDLogin_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 4;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgLoginPlatformSidToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgLoginPlatformSidToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TokenPlatform != other.TokenPlatform) return false;
    if (DeviceGUID != other.DeviceGUID) return false;
    if (UUIDLogin != other.UUIDLogin) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TokenPlatform.Length != 0) hash ^= TokenPlatform.GetHashCode();
    if (DeviceGUID.Length != 0) hash ^= DeviceGUID.GetHashCode();
    if (UUIDLogin != 0UL) hash ^= UUIDLogin.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TokenPlatform.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TokenPlatform);
    }
    if (DeviceGUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceGUID);
    }
    if (UUIDLogin != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(UUIDLogin);
    }
    if (Result != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TokenPlatform.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenPlatform);
    }
    if (DeviceGUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceGUID);
    }
    if (UUIDLogin != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UUIDLogin);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgLoginPlatformSidToken other) {
    if (other == null) {
      return;
    }
    if (other.TokenPlatform.Length != 0) {
      TokenPlatform = other.TokenPlatform;
    }
    if (other.DeviceGUID.Length != 0) {
      DeviceGUID = other.DeviceGUID;
    }
    if (other.UUIDLogin != 0UL) {
      UUIDLogin = other.UUIDLogin;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          TokenPlatform = input.ReadString();
          break;
        }
        case 18: {
          DeviceGUID = input.ReadString();
          break;
        }
        case 24: {
          UUIDLogin = input.ReadUInt64();
          break;
        }
        case 32: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgReLogin : pb::IMessage<MsgReLogin> {
  private static readonly pb::MessageParser<MsgReLogin> _parser = new pb::MessageParser<MsgReLogin>(() => new MsgReLogin());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgReLogin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgReLogin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgReLogin(MsgReLogin other) : this() {
    checkData_ = other.checkData_;
    deviceGUID_ = other.deviceGUID_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgReLogin Clone() {
    return new MsgReLogin(this);
  }

  /// <summary>Field number for the "checkData" field.</summary>
  public const int CheckDataFieldNumber = 1;
  private string checkData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CheckData {
    get { return checkData_; }
    set {
      checkData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceGUID" field.</summary>
  public const int DeviceGUIDFieldNumber = 2;
  private string deviceGUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceGUID {
    get { return deviceGUID_; }
    set {
      deviceGUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgReLogin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgReLogin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CheckData != other.CheckData) return false;
    if (DeviceGUID != other.DeviceGUID) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CheckData.Length != 0) hash ^= CheckData.GetHashCode();
    if (DeviceGUID.Length != 0) hash ^= DeviceGUID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CheckData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CheckData);
    }
    if (DeviceGUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceGUID);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CheckData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CheckData);
    }
    if (DeviceGUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceGUID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgReLogin other) {
    if (other == null) {
      return;
    }
    if (other.CheckData.Length != 0) {
      CheckData = other.CheckData;
    }
    if (other.DeviceGUID.Length != 0) {
      DeviceGUID = other.DeviceGUID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          CheckData = input.ReadString();
          break;
        }
        case 18: {
          DeviceGUID = input.ReadString();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgKick : pb::IMessage<MsgKick> {
  private static readonly pb::MessageParser<MsgKick> _parser = new pb::MessageParser<MsgKick>(() => new MsgKick());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgKick> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgKick() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgKick(MsgKick other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgKick Clone() {
    return new MsgKick(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgKick);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgKick other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgKick other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgEnterGameWorld : pb::IMessage<MsgEnterGameWorld> {
  private static readonly pb::MessageParser<MsgEnterGameWorld> _parser = new pb::MessageParser<MsgEnterGameWorld>(() => new MsgEnterGameWorld());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgEnterGameWorld> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgEnterGameWorld() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgEnterGameWorld(MsgEnterGameWorld other) : this() {
    serverID_ = other.serverID_;
    uUIDLogin_ = other.uUIDLogin_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgEnterGameWorld Clone() {
    return new MsgEnterGameWorld(this);
  }

  /// <summary>Field number for the "serverID" field.</summary>
  public const int ServerIDFieldNumber = 1;
  private int serverID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerID {
    get { return serverID_; }
    set {
      serverID_ = value;
    }
  }

  /// <summary>Field number for the "UUIDLogin" field.</summary>
  public const int UUIDLoginFieldNumber = 2;
  private ulong uUIDLogin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UUIDLogin {
    get { return uUIDLogin_; }
    set {
      uUIDLogin_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgEnterGameWorld);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgEnterGameWorld other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerID != other.ServerID) return false;
    if (UUIDLogin != other.UUIDLogin) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ServerID != 0) hash ^= ServerID.GetHashCode();
    if (UUIDLogin != 0UL) hash ^= UUIDLogin.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ServerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ServerID);
    }
    if (UUIDLogin != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(UUIDLogin);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ServerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
    }
    if (UUIDLogin != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UUIDLogin);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgEnterGameWorld other) {
    if (other == null) {
      return;
    }
    if (other.ServerID != 0) {
      ServerID = other.ServerID;
    }
    if (other.UUIDLogin != 0UL) {
      UUIDLogin = other.UUIDLogin;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ServerID = input.ReadInt32();
          break;
        }
        case 16: {
          UUIDLogin = input.ReadUInt64();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgAgentDisConnect : pb::IMessage<MsgAgentDisConnect> {
  private static readonly pb::MessageParser<MsgAgentDisConnect> _parser = new pb::MessageParser<MsgAgentDisConnect>(() => new MsgAgentDisConnect());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgAgentDisConnect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgAgentDisConnect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgAgentDisConnect(MsgAgentDisConnect other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgAgentDisConnect Clone() {
    return new MsgAgentDisConnect(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgAgentDisConnect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgAgentDisConnect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgAgentDisConnect other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class MsgKeepAlive : pb::IMessage<MsgKeepAlive> {
  private static readonly pb::MessageParser<MsgKeepAlive> _parser = new pb::MessageParser<MsgKeepAlive>(() => new MsgKeepAlive());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgKeepAlive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgKeepAlive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgKeepAlive(MsgKeepAlive other) : this() {
    number_ = other.number_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgKeepAlive Clone() {
    return new MsgKeepAlive(this);
  }

  /// <summary>Field number for the "number" field.</summary>
  public const int NumberFieldNumber = 1;
  private int number_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Number {
    get { return number_; }
    set {
      number_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgKeepAlive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgKeepAlive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Number != other.Number) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Number != 0) hash ^= Number.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Number != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Number);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Number != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgKeepAlive other) {
    if (other == null) {
      return;
    }
    if (other.Number != 0) {
      Number = other.Number;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Number = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
